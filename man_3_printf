.\" Holberton School - 0122 - ID: 4543, ID: 4564.
.\" Manual page for _printf function.
.TH _printf 3 "25 March 2022" "1.0" "Programmer's Manual for _printf"
.SH NAME
 _printf -- formatted output conversion and print data.
.SH SYNOPSIS
.nf
.BI _printf (format, arguments...)
.PP
.BI "#include 'main.h'"
.PP
.BI "int _printf(const char *format, ...);"
.BI "int print_char(va_list str);"
.BI "int print_string(va_list str);"
.BI "int print_number(va_list number);"
.BI "int print_u_number(va_list number);"
.BI "int print_binary(va_list number);"
.BI "int print_octal(va_list num);"
.BI "int print_revstr(va_list list);"
.BI "int print_root13(va_list string);"
.BI "int print_hexa(va_list number);"
.BI "int print_hexa_up(va_list number);"
.PP
.BI "int (*get_fun(char format))(va_list);"
.PP
.BI "int _char_to_number(char *str);"
.BI "char *_number_to_char(int n);"
.PP
.BI "void reverse_array(char *str);"
.PP
.SH DESCRIPTION
The _printf() output function produces the output according to a format. The _printf function converts the character strings (can be just characters, character strings, numbers...) that it receives as argument and prints them to standard output.
.SS Return Value
Return the number of characters printed (excluding the null byte used to end output to strings).
.SS Format String Input
The format string is a character string, which contains two types of directives: ordinary characters which are coppied to the output stream; and conversion specifiers. Each conversion specification is introduced by the character %, and ends with a \fBconversion specifier\fR. When it encounters the \fBconversion specifier\fR it checks the cases internally and then passes the received argument to the function that handles that specific case.
.SS Conversion Specifiers
The conversion specifiers and their meanings are: 
.TP
.B c
.R The \fIint\fR argument is converted to an \fIchar\fR, and the resulting character is written.
.TP
.B s
.R The \fIchar *\fR argument is a pointer to an array of characters, that converts the corresponding argument to a character string.
.TP
.B d, i
.R The \fIint\fR argument is converted to signed decimal notation.
.TP
.B o, u, x, X
.R The \fIunsigned int\fR argument is converted to unsigned octal \fIo\fR (base 8 number), unsigned decimal \fIu\fR (base 10 number), unsigned hexadecimal \fIx\fR (base 16 number with lowercase letters) and unsigned hexadecimal \fIX\fR (base 16 number with uppercase letters).
.TP
.B %, %%
.R If only the \fI%\fR character is written no argument is converted. The complete conversion specification is \fI%%\fR, that returns the actual sign if there in front.
.SH NOTES
.R The \fB_printf()\fR is a project collaboration between \fBSebastian Garcia\fR and \fBSebastian Blandon\fR, actual students of Software Engineering at \fBHolberton School\fR.
.SH EXAMPLE
.R To print the the string \fBHello Holberton!\fR and its length in decimal.

#include ''main.h''

int main(void)

{

	int length;

	length = _printf(''%s'', ''Hello, Holberton, _printf project!'')

	_printf('' contains %d characters'', length);

	return (0);

}
.SH SEE ALSO
.R printf(3)
.SH AUTHORS
Written by \fBSebastian Garcia\fR and \fBSebastian Blandon\fR.